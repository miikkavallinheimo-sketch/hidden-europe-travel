---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';

export async function getStaticPaths() {
  const blogPosts = await getCollection('blog');
  return blogPosts.map((post: CollectionEntry<'blog'>) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props as { post: CollectionEntry<'blog'> };
const { Content } = await post.render();

const formattedDate = post.data.publishDate.toLocaleDateString('en-GB', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});
---

<Layout 
  title={post.data.title}
  description={post.data.description}
>
  <Navigation />

  <main>
    <article class="article">
      <div class="breadcrumb">
        <a href="/blog">Blog</a> â†’ 
        <a href={`/blog/category/${post.data.category}`}>{post.data.category.replace('-', ' ')}</a>
      </div>

      {post.data.heroImage && (
        <div class="hero">
          <img src={post.data.heroImage} alt={post.data.title} class="hero-image" />
        </div>
      )}

      <div class="content">
        <div class="meta">
          <span class="category">{post.data.category.replace('-', ' ')}</span>
        </div>

        <h1>{post.data.title}</h1>
        <p class="description">{post.data.description}</p>

        <div class="article-meta">
          <span class="author">By {post.data.author}</span>
          <span class="date">{formattedDate}</span>
          {post.data.readingTime && (
            <span class="reading-time">{post.data.readingTime} min read</span>
          )}
        </div>

        <div class="article-content">
          <Content />
        </div>

        {post.data.tags && post.data.tags.length > 0 && (
          <div class="tags">
            {post.data.tags.map(tag => <a href={`/blog/tag/${tag}`} class="tag">#{tag}</a>)}
          </div>
        )}
      </div>
    </article>
  </main>
</Layout>

<style>
  .article {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
  }

  .breadcrumb {
    margin-bottom: 2rem;
  }

  .breadcrumb a {
    color: var(--cal-poly-green);
    text-decoration: none;
  }

  :root.dark .breadcrumb a {
    color: var(--bright-blue);
  }

  .hero {
    margin: -2rem -2rem 2rem -2rem;
  }

  .hero-image {
    width: 100%;
    height: auto;
    max-height: 500px;
    object-fit: cover;
  }

  .meta {
    margin-bottom: 1rem;
  }

  .category {
    color: var(--cal-poly-green);
    text-transform: capitalize;
  }

  :root.dark .category {
    color: var(--bright-blue);
  }

  h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: var(--cal-poly-green);
    font-weight: 300;
  }

  :root.dark h1 {
    color: var(--card-title);
  }

  .description {
    font-size: 1.3rem;
    color: var(--text-secondary);
    margin-bottom: 2rem;
    line-height: 1.6;
  }

  :root.dark .description {
    color: var(--card-text);
  }

  .article-meta {
    display: flex;
    gap: 1rem;
    margin-bottom: 3rem;
    color: var(--text-secondary);
    font-size: 0.9rem;
  }

  :root.dark .article-meta {
    color: var(--card-text);
  }

  .article-content {
    font-size: 1.2rem;
    line-height: 1.8;
    color: var(--text-primary);
  }

  :root.dark .article-content {
    color: var(--card-text);
  }

  .article-content :global(h2) {
    font-size: 2rem;
    margin: 2rem 0 1rem 0;
    color: var(--cal-poly-green);
    font-weight: 400;
  }

  :root.dark .article-content :global(h2) {
    color: var(--card-title);
  }

  .article-content :global(h3) {
    font-size: 1.5rem;
    margin: 1.5rem 0 1rem 0;
    color: var(--cal-poly-green);
    font-weight: 500;
  }

  :root.dark .article-content :global(h3) {
    color: var(--card-title);
  }

  .article-content :global(p) {
    margin-bottom: 1.5rem;
  }

  .article-content :global(ul),
  .article-content :global(ol) {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }

  .article-content :global(li) {
    margin-bottom: 0.5rem;
  }

  .tags {
    margin-top: 3rem;
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .tag {
    background: var(--bg-secondary);
    color: var(--cal-poly-green);
    padding: 0.3rem 0.8rem;
    border-radius: 20px;
    text-decoration: none;
    font-size: 0.9rem;
  }

  :root.dark .tag {
    background: var(--bg-muted);
    color: var(--bright-blue);
  }

  .tag:hover {
    background: var(--cal-poly-green);
    color: white;
  }

  :root.dark .tag:hover {
    background: var(--bright-blue);
  }

  @media (max-width: 768px) {
    .article {
      padding: 1rem;
    }

    .hero {
      margin: -1rem -1rem 1rem -1rem;
    }

    h1 {
      font-size: 2rem;
    }
  }
</style>